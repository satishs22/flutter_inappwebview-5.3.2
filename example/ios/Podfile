# Uncomment this line to define a global platform for your project
platform :ios, '12.0'

# Disable CocoaPods analytics to improve Flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

target 'Runner' do
  use_frameworks!
  use_modular_headers!
  pod 'FirebaseCore'
  pod 'Firebase/Auth'
  pod 'Firebase/Storage'
  pod 'Firebase'
  pod 'Protobuf', '= 3.21.3'

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
end

def set_run_script_to_always_run_when_no_input_or_output_files_exist(project:)
  project.targets.each do |target|
    run_script_build_phases = target.build_phases.filter { |phase| phase.is_a?(Xcodeproj::Project::Object::PBXShellScriptBuildPhase) }
    cocoapods_run_script_build_phases = run_script_build_phases.filter { |phase| phase.name&.start_with?("[CP") }
    cocoapods_run_script_build_phases.each do |run_script|
      next unless (run_script.input_paths || []).empty? && (run_script.output_paths || []).empty?
      run_script.always_out_of_date = "1"
    end
  end
  project.save
end

post_integrate do |installer|
  main_project = installer.aggregate_targets[0].user_project
  set_run_script_to_always_run_when_no_input_or_output_files_exist(project: main_project)
end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    main_project = installer.aggregate_targets[0].user_project
    pods_project = installer.pods_project
    targets = main_project.targets + pods_project.targets
    targets.each do |target|
      run_script_build_phases = target.build_phases.filter { |phase| phase.is_a?(Xcodeproj::Project::Object::PBXShellScriptBuildPhase) }
      cocoapods_run_script_build_phases = run_script_build_phases.filter { |phase| phase.name&.start_with?("[CP") }
      cocoapods_run_script_build_phases.each do |run_script|
        next unless (run_script.input_paths || []).empty? && (run_script.output_paths || []).empty?
        run_script.always_out_of_date = "1"
      end
    end
    flutter_additional_ios_build_settings(target)
    target_is_resource_bundle = target.respond_to?(:product_type) && target.product_type == 'com.apple.product-type.bundle'
    target.build_configurations.each do |config|
      config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
      config.build_settings['CODE_SIGNING_REQUIRED'] = 'NO'
      config.build_settings['CODE_SIGNING_IDENTITY'] = '-'
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '12.0'
      config.build_settings["EXCLUDED_ARCHS[sdk=iphonesimulator*]"] = "arm64"
      config.build_settings['ENABLE_BITCODE'] = 'YES'
      config.build_settings["ONLY_ACTIVE_ARCH"] = "YES"
      if target.name && target.name.start_with?("GoogleDataTransport")
        config.build_settings['CLANG_WARN_STRICT_PROTOTYPES'] = 'NO'
      end
    end
  end
  unless installer.pods_project.nil?
    set_run_script_to_always_run_when_no_input_or_output_files_exist(project: installer.pods_project)
  end
end

